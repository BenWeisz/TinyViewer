{"version":3,"sources":["webpack://tinyviewer/./src/ppmPreview.ts","webpack://tinyviewer/./src/tgaPreview.ts","webpack://tinyviewer/./src/webview.ts","webpack://tinyviewer/external \"vscode\"","webpack://tinyviewer/webpack/bootstrap","webpack://tinyviewer/./src/extension.ts"],"names":["PPM_HEADERS","PPMPreviewDocument","vscode","Disposable","uri","initialData","super","this","documentData","workspace","fs","readFile","fileData","stringData","getDocumentData","toString","split","join","data","filter","str","uriPath","fsPath","forwardSlashPath","backwardSlashPath","uriName","length","includes","width","height","imageData","parseInt","maxValue","Uint8Array","slice","forEach","v","i","Math","floor","status","dispose","PPMPreviewProvider","_context","context","window","registerCustomEditorProvider","viewType","supportsMultipleEditorsPerDocument","_openContext","_token","create","document","webviewPanel","webview","options","enableScripts","html","getHTMLforWebview","postMessage","TGAPreviewDocument","dataSlice","totalPages","pageIndex","TGAPreviewProvider","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","call","activate","subscriptions","push","register","deactivate"],"mappings":"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","file":"extension.js","sourcesContent":["import * as vscode from 'vscode';\r\nimport { getHTMLforWebview } from './webview';\r\n\r\nconst P3 = 'P3';\r\nconst PPM_HEADERS = [P3];\r\n\r\nclass PPMPreviewDocument extends vscode.Disposable implements vscode.CustomDocument {\r\n  readonly uri: vscode.Uri;\r\n  private documentData: Uint8Array;\r\n\r\n  private static async readFile(uri: vscode.Uri) {\r\n    return vscode.workspace.fs.readFile(uri);\r\n  }\r\n\r\n  static async create(uri: vscode.Uri) {\r\n    const fileData = await PPMPreviewDocument.readFile(uri);\r\n    return new PPMPreviewDocument(uri, fileData);\r\n  }\r\n\r\n  private constructor(uri: vscode.Uri, initialData: Uint8Array) {\r\n    super(() => {});\r\n    this.uri = uri;\r\n    this.documentData = initialData;\r\n  }\r\n\r\n  public get getDocumentData() { return this.documentData; }\r\n\r\n  public get imageData(): object {\r\n    let stringData = this.getDocumentData.toString();\r\n    stringData = stringData.split('\\r\\n').join(' ');\r\n    stringData = stringData.split('\\n').join(' ');\r\n    stringData = stringData.split('\\t').join(' ');\r\n\r\n    const dataArray = stringData.split(' ');\r\n    const data = dataArray.filter(str => str !== '');\r\n\r\n    const uriPath = this.uri.fsPath;\r\n      \r\n    const forwardSlashPath = uriPath.split('/');\r\n    const backwardSlashPath = uriPath.split('\\\\');\r\n    const uriName = backwardSlashPath.length > 1 ? backwardSlashPath[backwardSlashPath.length - 1] : forwardSlashPath[forwardSlashPath.length - 1];\r\n\r\n    if (PPM_HEADERS.includes(data[0])) {\r\n      let width;\r\n      let height;\r\n      let imageData;\r\n\r\n      if (data[0] === P3) {\r\n        width = parseInt(data[1], 10);\r\n        height = parseInt(data[2], 10);\r\n\r\n        const maxValue = parseInt(data[3], 10);\r\n        imageData = new Uint8Array(data.length - 4);\r\n        data.slice(4, data.length).forEach((v, i) => {\r\n          imageData[i] = Math.floor(parseInt(v, 10) / (maxValue + 0.0) * 255);\r\n        });\r\n      }\r\n\r\n      return {\r\n        status: 'Success',\r\n        width,\r\n        height,\r\n        imageData,\r\n      };\r\n    }\r\n\r\n    return { status: `Failed to load file \"${uriName}\". This only supported formats are plain-text: ${PPM_HEADERS}` };\r\n  }\r\n\r\n  dispose() {\r\n    super.dispose();\r\n  }\r\n}\r\n\r\nexport default class PPMPreviewProvider implements vscode.CustomReadonlyEditorProvider<PPMPreviewDocument>{\r\n  private static viewType = 'tinyviewer.ppmpreview';\r\n  \r\n  public static register(context: vscode.ExtensionContext): vscode.Disposable {\r\n    return vscode.window.registerCustomEditorProvider(\r\n      PPMPreviewProvider.viewType,\r\n      new PPMPreviewProvider(context),\r\n      { supportsMultipleEditorsPerDocument: false },\r\n    );\r\n  }\r\n\r\n  constructor(private readonly _context: vscode.ExtensionContext) { }\r\n  \r\n  async openCustomDocument(\r\n    uri: vscode.Uri,\r\n    _openContext: {},\r\n    _token: vscode.CancellationToken\r\n  ): Promise<PPMPreviewDocument> {\r\n    const document = await PPMPreviewDocument.create(uri);\r\n    return document;\r\n  }\r\n\r\n  async resolveCustomEditor(\r\n    document: PPMPreviewDocument,\r\n    webviewPanel: vscode.WebviewPanel,\r\n    _token: vscode.CancellationToken\r\n  ): Promise<void> {\r\n    webviewPanel.webview.options = {\r\n      enableScripts: true,\r\n      //retainContextWhenHidden: true,\r\n    };\r\n    \r\n    webviewPanel.webview.html = getHTMLforWebview(webviewPanel.webview, this._context);\r\n    webviewPanel.webview.postMessage(document.imageData);\r\n  }\r\n}","import * as vscode from 'vscode';\r\nimport { getHTMLforWebview } from './webview';\r\n\r\nclass TGAPreviewDocument extends vscode.Disposable implements vscode.CustomDocument {\r\n  readonly uri: vscode.Uri;\r\n  private documentData: Uint8Array;\r\n\r\n  private static async readFile(uri: vscode.Uri) {\r\n    return vscode.workspace.fs.readFile(uri);\r\n  }\r\n\r\n  static async create(uri: vscode.Uri) {\r\n    const fileData = await TGAPreviewDocument.readFile(uri);\r\n    return new TGAPreviewDocument(uri, fileData);\r\n  }\r\n\r\n  private constructor(uri: vscode.Uri, initialData: Uint8Array) {\r\n    super(() => {});\r\n    this.uri = uri;\r\n    this.documentData = initialData;\r\n  }\r\n\r\n  public get getDocumentData() { return this.documentData; }\r\n\r\n  public get imageData(): object {\r\n    const data = this.getDocumentData;\r\n\r\n    const uriPath = this.uri.fsPath;\r\n    const forwardSlashPath = uriPath.split('/');\r\n    const backwardSlashPath = uriPath.split('\\\\');\r\n    const uriName = backwardSlashPath.length > 1 ? backwardSlashPath[backwardSlashPath.length - 1] : forwardSlashPath[forwardSlashPath.length - 1];\r\n\r\n    if (data[2] === 0x02 && data[16] === 0x18) {\r\n      const width = (data[13] << 8) || data[12];\r\n      const height = (data[15] << 8) || data[14];\r\n\r\n      const imageData = new Uint8Array(data.length - 18);\r\n      const dataSlice = data.slice(18, data.length);\r\n      const totalPages = dataSlice.length / 3;\r\n      for (let i = 0; i < totalPages; i += 1) {\r\n        const pageIndex = i * 3;\r\n        imageData[pageIndex + 0] = dataSlice[(totalPages * 3) - 3 - pageIndex + 0];\r\n        imageData[pageIndex + 1] = dataSlice[(totalPages * 3) - 3 - pageIndex + 1];\r\n        imageData[pageIndex + 2] = dataSlice[(totalPages * 3) - 3 - pageIndex + 2];\r\n      } \r\n\r\n      return {\r\n        status: 'Success',\r\n        width,\r\n        height,\r\n        imageData,\r\n      };\r\n    }\r\n\r\n    return { status: `Failed to load file \"${uriName}\". Please see Paul Bourke's Basic TGA setup for the format` }; \r\n  }\r\n\r\n  dispose() { super.dispose(); }\r\n}\r\n\r\nexport default class TGAPreviewProvider implements vscode.CustomReadonlyEditorProvider<TGAPreviewDocument>{\r\n  private static viewType = 'tinyviewer.tgapreview';\r\n  \r\n  public static register(context: vscode.ExtensionContext): vscode.Disposable {\r\n    return vscode.window.registerCustomEditorProvider(\r\n      TGAPreviewProvider.viewType,\r\n      new TGAPreviewProvider(context),\r\n      { supportsMultipleEditorsPerDocument: false },\r\n    );\r\n  }\r\n\r\n  constructor(private readonly _context: vscode.ExtensionContext) { }\r\n  \r\n  async openCustomDocument(\r\n    uri: vscode.Uri,\r\n    _openContext: {},\r\n    _token: vscode.CancellationToken\r\n  ): Promise<TGAPreviewDocument> {\r\n    const document = await TGAPreviewDocument.create(uri);\r\n    return document;\r\n  }\r\n\r\n  async resolveCustomEditor(\r\n    document: TGAPreviewDocument,\r\n    webviewPanel: vscode.WebviewPanel,\r\n    _token: vscode.CancellationToken\r\n  ): Promise<void> {\r\n    webviewPanel.webview.options = {\r\n      enableScripts: true,\r\n    };\r\n\r\n    webviewPanel.webview.html = getHTMLforWebview(webviewPanel.webview, this._context);\r\n    webviewPanel.webview.postMessage(document.imageData);\r\n  }\r\n}","import * as vscode from 'vscode';\r\n\r\nconst canvasScript = `\r\n  const DATA_OK = 'Success';\r\n\r\n  window.addEventListener('message', event => {\r\n    console.log(event.data);\r\n    const status = event.data.status;\r\n    if (status !== DATA_OK) {\r\n      const textNode = document.createTextNode(status);\r\n      const errorTag = document.getElementById('errorTag');\r\n      errorTag.appendChild(textNode);\r\n    }\r\n    else {\r\n      const { width, height, imageData } = event.data;\r\n      const canvas = document.querySelector(\"#canvas\");\r\n      console.log(event.data);\r\n      if (imageData && Object.keys(imageData).length === width * height * 3) {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        \r\n        const ctx = canvas.getContext('2d');\r\n        const image = new ImageData(width, height);\r\n        const pixels = image.data;\r\n        \r\n        for (let y = 0; y < height; y += 1) {\r\n          for (let x = 0; x < width; x += 1) {\r\n            const offset = (y * width) + x;\r\n            pixels[(offset * 4) + 0] = imageData[(offset * 3) + 0];\r\n            pixels[(offset * 4) + 1] = imageData[(offset * 3) + 1];\r\n            pixels[(offset * 4) + 2] = imageData[(offset * 3) + 2];\r\n            pixels[(offset * 4) + 3] = 255; \r\n          } \r\n        }\r\n        \r\n        ctx.putImageData(image, 0, 0);\r\n      } else {\r\n        canvas.remove();\r\n      }\r\n    }\r\n  });\r\n`;\r\n\r\nexport const getHTMLforWebview = (webview: vscode.Webview, context: vscode.ExtensionContext): string => {  \r\n  return /* html */`\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n      <head>\r\n        <title>PPM Preview</title>\r\n        <meta charset=\"UTF-8\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n        <style>\r\n          #canvas {\r\n            background-color: whitesmoke;\r\n            position: fixed;\r\n            left: 50%;\r\n            top: 50%;\r\n            transform: translate(-50%, -50%);\r\n          }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        <p id=\"errorTag\"></p>\r\n        <div id=\"frame\">\r\n          <canvas id=\"canvas\"></canvas>\r\n        </div>\r\n        <script>${canvasScript}</script>\r\n      </body>\r\n    </html>\r\n  `;\r\n};\r\n","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\nimport PPMPreviewProvider from './ppmPreview';\nimport TGAPreviewProvider from './tgaPreview';\n\nexport const activate = (context: vscode.ExtensionContext) => {\n\tcontext.subscriptions.push(PPMPreviewProvider.register(context));\n\tcontext.subscriptions.push(TGAPreviewProvider.register(context));\n};\n\nexport const deactivate = () => {\n\n};\n"],"sourceRoot":""}